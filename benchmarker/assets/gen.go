//go:generate go run .
package main

import (
	"crypto/md5"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const basePathENV = "PUBLIC_FILES_DIR"
const filePathsENV = "PUBLIC_FILES"

func hashMD5(path string) string {
	blob, err := os.Open(path)
	if err != nil {
		log.Fatal(err)
	}
	defer blob.Close()

	hash := md5.New()
	if _, err := io.Copy(hash, blob); err != nil {
		log.Fatal(err)
	}
	return fmt.Sprintf("%x", hash.Sum(nil))
}

func main() {
	targetPaths := strings.Split(os.Getenv(filePathsENV), " ")
	baseDirPath := os.Getenv(basePathENV)

	hashes := map[string]string{}

	for _, t := range targetPaths {
		path := strings.TrimPrefix(t, baseDirPath)
		hashes[path] = hashMD5(t)
	}

	file, err := os.Create(filepath.Join("../scenario", "assets.go"))
	if err != nil {
		log.Fatal(err)
	}

	err = template.Must(template.New("prog").Parse(prog)).Execute(file, hashes)
	if err != nil {
		log.Fatal(err)
	}
}

const prog = `// Code generated by assets/gen.go; DO NOT EDIT.
package scenario
var (
	resourcesHash = map[string]string{ {{range $key, $value := .}}
		"{{$key}}": "{{$value}}",{{end}}
	}
)
`
